
[synchronized]

可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，
同时它还可以保证共享变量的内存可见性

Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：

1.普通同步方法，锁是当前实例对象

2.静态同步方法，锁是当前类的class对象

3.同步方法块，锁是括号里面的对象


/-----------------------------------------------------------------------------------/
同步代码块：线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁；

同步方法：在Class字节码文件的方法表中将该方法的access_flags字段中的synchronized标志位置1，
表示该方法是同步方法并使用调用该方法的对象或该方法所属的Class在JVM的内部对象表示Klass做为锁对象。


/-----------------------------------------------------------------------------------/
Java对象头和monitor是实现synchronized的基础

[Java对象头]

1.synchronized用的锁是存在Java对象头里

2.对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针)

3.Klass Point是是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例

4.Mark Word用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。它是实现轻量级锁和偏向锁的关键

Java对象头一般占有两个机器码（在32位虚拟机中，1个机器码等于4字节，也就是32bit）
下图是Java对象头的存储结构（32位虚拟机）：

----------------------------------------------------------------------------------------------------
            25bit       |            4bit       |          1bit         |            2bit       |
----------------------------------------------------------------------------------------------------
       对象的hashCode   |       对象的分代年龄  |       是否是偏向锁    |           锁标志位    |
----------------------------------------------------------------------------------------------------



------------------------------------------------
            锁状态       |         锁标志位（2bit）       
------------------------------------------------
           无锁状态      |           01  
           轻量级锁      |           00  
           重量级锁      |           10  
           GC标志        |           11  
           偏向锁        |           01  
------------------------------------------------
（http://cmsblogs.com/?p=2071）
 

对象头信息是与对象自身定义的数据无关的额外存储成本，但是考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据，它会根据对象的状态复用自己的存储空间，也就是说，Mark Word会随着程序的运行发生变化


[Monitor]

Monitor可以把它理解为一个同步工具，也可以描述为一种同步机制，它通常被描述为一个对象。
每一个被锁住的对象都会和一个monitor关联（对象头的MarkWord中的LockWord指向monitor的起始地址）
同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用

/-----------------------------------------------------------------------------------/
[锁优化]

1.自旋锁
让该线程等待一段时间，不会被立即挂起，看持有锁的线程是否会很快释放锁，即执行一段无意义的循环，循环默认次数10（自旋）。

2.适应自旋锁
线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。

3.锁消除
如果不存在竞争，为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。
如StringBuffer、Vector、HashTable等，这个时候会存在隐形的加锁操作
-----------------------------------------------------------------------------------

    public void vectorTest(){

        Vector<String> vector = new Vector<String>();

        for(int i = 0 ; i < 10 ; i++){
            vector.add(i + "");
        }

        System.out.println(vector);

    }

-----------------------------------------------------------------------------------
在运行这段代码时，JVM可以明显检测到变量vector没有逃逸出方法vectorTest()之外，所以JVM可以大胆地将vector内部的加锁操作消除。

4.锁粗化
将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。
如上面实例：vector每次add的时候都需要加锁操作，JVM检测到对同一个对象（vector）连续加锁、解锁操作，会合并一个更大范围的加锁、解锁操作，即加锁解锁操作会移到for循环之外。

5.轻量级锁

1）获取锁

1.判断当前对象是否处于无锁状态（hashcode、0、01），若是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark Word）；否则执行步骤（3）；

2.JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指正，
如果成功表示竞争到锁，则将锁标志位变成00（表示此对象处于轻量级锁状态），执行同步操作；如果失败则执行步骤（3）；

3.判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；


2）释放锁

轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下：

1.取出在获取轻量级锁保存在Displaced Mark Word中的数据；

2.用CAS操作将取出的数据替换当前对象的Mark Word中，如果成功，则说明释放锁成功，否则执行（3）；

3.如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要在释放锁的同时需要唤醒被挂起的线程。

查看【轻量级锁的获取和释放过程】图片